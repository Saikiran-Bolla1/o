import re
import json

def load_symbols_dict(symbols_json_path):
    with open(symbols_json_path, "r") as f:
        return json.load(f)

def update_a2l_addresses(a2l_in, a2l_out, symbols_dict):
    # Matches MEASUREMENT/CHARACTERISTIC blocks, finds the address field (ECU_ADDRESS, ADDRESS, VALUE)
    # Example: MEASUREMENT "SymbolName" ... ECU_ADDRESS 0x... ... or ADDRESS 0x... or VALUE 0x...
    block_pattern = re.compile(
        r'(MEASUREMENT|CHARACTERISTIC)\s+"([^"]+)"(.*?)(ECU_ADDRESS|ADDRESS|VALUE)\s+(0x[0-9A-Fa-f]+|\d+)',
        re.DOTALL | re.IGNORECASE
    )

    def replacer(match):
        block_type = match.group(1)
        symbol_name = match.group(2)
        block_rest = match.group(3)
        addr_type = match.group(4)
        old_addr = match.group(5)
        # Try exact match first, then allow for dot/underscore differences
        new_addr = None
        if symbol_name in symbols_dict:
            new_addr = symbols_dict[symbol_name]["address"]
        else:
            # Try replacing . with _ or vice versa
            alt_names = [
                symbol_name.replace('.', '_'),
                symbol_name.replace('_', '.')
            ]
            for alt in alt_names:
                if alt in symbols_dict:
                    new_addr = symbols_dict[alt]["address"]
                    break
        if new_addr:
            print(f"Updating {symbol_name}: {addr_type} {old_addr} -> {new_addr}")
            return f'{block_type} "{symbol_name}"{block_rest}{addr_type} {new_addr}'
        else:
            return match.group(0)  # No change

    with open(a2l_in, "r") as fin:
        a2l_text = fin.read()

    # Replace the addresses
    new_a2l_text = block_pattern.sub(replacer, a2l_text)

    with open(a2l_out, "w") as fout:
        fout.write(new_a2l_text)
    print(f"Updated A2L written to {a2l_out}")

if __name__ == "__main__":
    import sys
    if len(sys.argv) < 4:
        print("Usage: python update_a2l_addresses_robust.py <input.a2l> <symbols.json> <output.a2l>")
        sys.exit(1)
    a2l_in = sys.argv[1]
    symbols_json_path = sys.argv[2]
    a2l_out = sys.argv[3]
    symbols_dict = load_symbols_dict(symbols_json_path)
    update_a2l_addresses(a2l_in, a2l_out, symbols_dict)
