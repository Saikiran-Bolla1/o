#!/usr/bin/env python3
import sys
from elftools.elf.elffile import ELFFile
from elftools.dwarf.descriptions import describe_form_class

MAX_ARRAY = 32

DW_ATE_ADDRESS        = 0x01
DW_ATE_BOOLEAN        = 0x02
DW_ATE_COMPLEX_FLOAT  = 0x03
DW_ATE_FLOAT          = 0x04
DW_ATE_SIGNED         = 0x05
DW_ATE_SIGNED_CHAR    = 0x06
DW_ATE_UNSIGNED       = 0x07
DW_ATE_UNSIGNED_CHAR  = 0x08

def get_symbols(elffile):
    """Return {name: {'addr': int, 'size': int, 'kind': str}} for all symbols (variables, functions, sections, files)"""
    out = {}
    for secname in ('.symtab', '.dynsym'):
        sec = elffile.get_section_by_name(secname)
        if not sec or not hasattr(sec, "iter_symbols"):
            continue
        for s in sec.iter_symbols():
            name = s.name
            if not name: continue
            addr = int(s['st_value'] or 0)
            size = int(s['st_size'] or 0)
            st_type = s['st_info']['type']
            kind = st_type.lower()
            out[name] = {'addr': addr, 'size': size, 'kind': kind}
    return out

def iter_dwarf_items(dwarfinfo):
    """Return {name: {'die': die, 'kind': kind}} for variables, functions, arrays, modules, structs."""
    out = {}
    for cu in dwarfinfo.iter_CUs():
        for die in cu.iter_DIEs():
            n = die.attributes.get('DW_AT_name')
            if not n: continue
            name = n.value.decode('utf-8', 'ignore')
            kind = None
            if die.tag == 'DW_TAG_variable':
                kind = 'variable'
            elif die.tag == 'DW_TAG_subprogram':
                kind = 'function'
            elif die.tag == 'DW_TAG_namespace':
                kind = 'module'
            elif die.tag == 'DW_TAG_structure_type':
                kind = 'struct'
            elif die.tag == 'DW_TAG_array_type':
                kind = 'array'
            if kind:
                out[name] = {'die': die, 'kind': kind}
    return out

def resolve_typedefs(die):
    """Follow DW_AT_type chain until a concrete type tag."""
    seen = set()
    cur = die
    while cur and cur.offset not in seen:
        seen.add(cur.offset)
        if cur.tag in ('DW_TAG_base_type', 'DW_TAG_pointer_type',
                       'DW_TAG_array_type', 'DW_TAG_structure_type', 'DW_TAG_union_type',
                       'DW_TAG_enumeration_type'):
            return cur
        if 'DW_AT_type' in cur.attributes:
            cur = cur.get_DIE_from_attribute('DW_AT_type')
        else:
            break
    return cur

def base_type_info(base_die):
    """Return (type_name, byte_size, encoding) for a DW_TAG_base_type or pointer; else (unknown, size, None)."""
    if base_die is None:
        return ('unknown', None, None)
    if base_die.tag == 'DW_TAG_pointer_type':
        bs = base_die.attributes.get('DW_AT_byte_size')
        return ('pointer', int(bs.value) if bs else None, None)
    if base_die.tag == 'DW_TAG_base_type':
        nm = base_die.attributes.get('DW_AT_name')
        bs = base_die.attributes.get('DW_AT_byte_size')
        enc = base_die.attributes.get('DW_AT_encoding')
        return (nm.value.decode('utf-8', 'ignore') if nm else 'unknown',
                int(bs.value) if bs else None,
                int(enc.value) if enc else None)
    if base_die.tag == 'DW_TAG_enumeration_type':
        bs = base_die.attributes.get('DW_AT_byte_size')
        return ('enum', int(bs.value) if bs else None, DW_ATE_SIGNED)
    bs = base_die.attributes.get('DW_AT_byte_size')
    return ('unknown', int(bs.value) if bs else None, None)

def array_len_first_dim(array_die):
    """Get first dimension length from DW_TAG_array_type."""
    for child in array_die.iter_children():
        if child.tag != 'DW_TAG_subrange_type':
            continue
        cnt = child.attributes.get('DW_AT_count')
        if cnt:
            return int(cnt.value)
        ub = child.attributes.get('DW_AT_upper_bound')
        lb = child.attributes.get('DW_AT_lower_bound')
        if ub and lb:
            return int(ub.value) - int(lb.value) + 1
        if ub:
            return int(ub.value) + 1
    return None

def dwarf_type_to_str(tname, tenc, tsize):
    if tenc == DW_ATE_UNSIGNED and tsize == 4: return "uint32"
    if tenc == DW_ATE_UNSIGNED and tsize == 2: return "ushort"
    if tenc == DW_ATE_UNSIGNED and tsize == 1: return "ubyte"
    if tenc == DW_ATE_SIGNED and tsize == 4: return "int32"
    if tenc == DW_ATE_SIGNED and tsize == 2: return "short"
    if tenc == DW_ATE_SIGNED and tsize == 1: return "byte"
    if tenc == DW_ATE_BOOLEAN: return "bool"
    return tname

def emit_array_elements(prefix, base_addr, array_die):
    """Print array elements as _<i>_ for regression up to MAX_ARRAY."""
    elem_die = array_die.get_DIE_from_attribute('DW_AT_type') if 'DW_AT_type' in array_die.attributes else None
    elem_die = resolve_typedefs(elem_die)
    etname, esize, etenc = base_type_info(elem_die)
    n = array_len_first_dim(array_die) or 0
    n_print = min(n, MAX_ARRAY)
    for i in range(n_print):
        eaddr = base_addr + i * (esize if esize else 1)
        print(f"{prefix}._{i}_ {hex(eaddr)} {dwarf_type_to_str(etname, etenc, esize):<10} {esize if esize else ''} array_elem")
    print(f"{prefix} {hex(base_addr)} array[{n}] {esize if esize else ''} array")

def emit_struct_members(prefix, base_addr, struct_die):
    """Print all members of a struct, including regression for arrays inside."""
    print(f"{prefix} {hex(base_addr)} struct")
    for child in struct_die.iter_children():
        if child.tag != 'DW_TAG_member':
            continue
        mname_attr = child.attributes.get('DW_AT_name')
        mname = mname_attr.value.decode('utf-8', 'ignore') if mname_attr else '<anon>'
        loc = child.attributes.get('DW_AT_data_member_location')
        off = 0
        if loc and describe_form_class(loc.form) == 'constant':
            off = int(loc.value)
        mt = child.get_DIE_from_attribute('DW_AT_type') if 'DW_AT_type' in child.attributes else None
        if not mt:
            continue
        mt = resolve_typedefs(mt)
        if mt.tag == 'DW_TAG_array_type':
            emit_array_elements(f"{prefix}.{mname}", base_addr + off, mt)
        elif mt.tag == 'DW_TAG_structure_type':
            emit_struct_members(f"{prefix}.{mname}", base_addr + off, mt)
        else:
            tname, tsize, tenc = base_type_info(mt)
            print(f"{prefix}.{mname} {hex(base_addr + off)} {dwarf_type_to_str(tname, tenc, tsize):<10} {tsize if tsize else ''} member")

def print_symbols_regression_table(symbols, dwarf_items, filter_prefix=None):
    print(f"{'Name':<60} {'Address':<12} {'Type':<10} {'Byte Size':<8} {'Kind':<13}")
    print("="*110)
    for name, meta in sorted(symbols.items(), key=lambda kv: kv[1]['addr']):
        if filter_prefix and filter_prefix not in name:
            continue
        kind = meta['kind']
        addr = f"0x{meta['addr']:08X}"
        size = meta['size']
        type_str = 'unknown'
        tsize = size
        die_info = dwarf_items.get(name)
        if die_info:
            die = die_info['die']
            kind = die_info['kind']
            if kind == 'variable':
                tdie = die.get_DIE_from_attribute('DW_AT_type') if 'DW_AT_type' in die.attributes else None
                base_die = resolve_typedefs(tdie) if tdie else None
                tname, bsize, tenc = base_type_info(base_die)
                type_str = dwarf_type_to_str(tname, tenc, bsize)
                tsize = bsize if bsize is not None else size
                if base_die and base_die.tag == 'DW_TAG_array_type':
                    emit_array_elements(name, meta['addr'], base_die)
                elif base_die and base_die.tag == 'DW_TAG_structure_type':
                    emit_struct_members(name, meta['addr'], base_die)
                else:
                    print(f"{name:<60} {addr:<12} {type_str:<10} {tsize if tsize else size:<8} variable")
            elif kind == 'array':
                emit_array_elements(name, meta['addr'], die)
            elif kind == 'struct':
                emit_struct_members(name, meta['addr'], die)
            elif kind == 'function':
                print(f"{name:<60} {addr:<12} {'function':<10} {'':<8} function")
            elif kind == 'module':
                print(f"{name:<60} {addr:<12} {'module':<10} {'':<8} module")
        else:
            print(f"{name:<60} {addr:<12} {type_str:<10} {tsize if tsize else size:<8} {kind:<13}")

def main(path, filter_prefix=None):
    with open(path, 'rb') as f:
        elf = ELFFile(f)
        symbols = get_symbols(elf)
        if not elf.has_dwarf_info():
            print_symbols_regression_table(symbols, {}, filter_prefix)
            return
        dwarfinfo = elf.get_dwarf_info()
        dwarf_items = iter_dwarf_items(dwarfinfo)
        print_symbols_regression_table(symbols, dwarf_items, filter_prefix)

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <elf-file> [filter_prefix]")
        sys.exit(1)
    elf_path = sys.argv[1]
    filter_prefix = sys.argv[2] if len(sys.argv) > 2 else None
    main(elf_path, filter_prefix)
