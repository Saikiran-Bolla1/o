#!/usr/bin/env python3
"""
Update A2L addresses for array elements (e.g. name._1_, name._2_, ...) using ELF file.
Assumes ELF symbol is 'name' (the array) and each A2L variable represents an element.
"""

import argparse
import re
from pathlib import Path
from elftools.elf.elffile import ELFFile

def get_elf_array_baseaddr(elf_path, array_name):
    with open(elf_path, "rb") as f:
        elf = ELFFile(f)
        for sec_name in (".symtab", ".dynsym"):
            sec = elf.get_section_by_name(sec_name)
            if not sec:
                continue
            for sym in sec.iter_symbols():
                if sym.name == array_name and sym['st_value'] != 0:
                    return sym['st_value']
    return None

def update_a2l_array_addresses(a2l_lines, array_name, base_addr, element_size):
    # Match lines: MEASUREMENT name._<i>_ "<desc>"
    pattern = re.compile(rf"\bMEASUREMENT\s+{re.escape(array_name)}\._(\d+)_\s+\"")
    for i, line in enumerate(a2l_lines):
        m = pattern.search(line)
        if m:
            idx = int(m.group(1)) - 1  # 0-based index
            addr = base_addr + element_size * idx
            # Find and update ECU_ADDRESS or address field in following lines
            for j in range(i, min(i+10, len(a2l_lines)):
                if "ECU_ADDRESS" in a2l_lines[j]:
                    a2l_lines[j] = re.sub(r'ECU_ADDRESS\s+\S+', f'ECU_ADDRESS 0x{addr:X}', a2l_lines[j])
    return a2l_lines

def main():
    parser = argparse.ArgumentParser(description="Update A2L addresses for array elements from ELF file.")
    parser.add_argument("--a2l-in", required=True, type=Path, help="Input A2L file")
    parser.add_argument("--elf", required=True, type=Path, help="ELF file")
    parser.add_argument("--a2l-out", required=True, type=Path, help="Output A2L file")
    parser.add_argument("--array-name", required=True, help="Array symbol name in ELF (e.g., name)")
    parser.add_argument("--element-size", required=True, type=int, help="Size of array element in bytes (e.g., 4 for int)")
    args = parser.parse_args()

    base_addr = get_elf_array_baseaddr(str(args.elf), args.array_name)
    if base_addr is None:
        print(f"Error: Array symbol '{args.array_name}' not found in ELF.")
        return

    a2l_lines = args.a2l_in.read_text(encoding="latin-1").splitlines()
    updated_lines = update_a2l_array_addresses(a2l_lines, args.array_name, base_addr, args.element_size)
    args.a2l_out.write_text("\n".join(updated_lines) + "\n", encoding="latin-1")
    print(f"Updated addresses for array '{args.array_name}' in {args.a2l_out}")

if __name__ == "__main__":
    main()
