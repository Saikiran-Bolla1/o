import sys
import csv
from elftools.elf.elffile import ELFFile


def get_type_name(die):
    if not die:
        return None
    if die.tag in ("DW_TAG_base_type", "DW_TAG_typedef", "DW_TAG_structure_type"):
        if "DW_AT_name" in die.attributes:
            return die.attributes["DW_AT_name"].value.decode("utf-8")
    if "DW_AT_type" in die.attributes:
        return get_type_name(die.get_DIE_from_attribute("DW_AT_type"))
    return None


def get_type_size(die):
    if not die:
        return None
    if "DW_AT_byte_size" in die.attributes:
        return die.attributes["DW_AT_byte_size"].value
    if "DW_AT_type" in die.attributes:
        return get_type_size(die.get_DIE_from_attribute("DW_AT_type"))
    return None


def emit_recursive(prefix, addr, die, rows):
    """Recursive expansion of structs/arrays into flat variables."""
    if die is None:
        return

    if die.tag == "DW_TAG_structure_type":
        for child in die.iter_children():
            if child.tag == "DW_TAG_member" and "DW_AT_name" in child.attributes:
                mname = child.attributes["DW_AT_name"].value.decode("utf-8")
                offset = child.attributes["DW_AT_data_member_location"].value
                emit_recursive(f"{prefix}.{mname}", addr + offset,
                               child.get_DIE_from_attribute("DW_AT_type"), rows)

    elif die.tag == "DW_TAG_array_type":
        base_type = die.get_DIE_from_attribute("DW_AT_type")
        count = 1
        for c in die.iter_children():
            if c.tag == "DW_TAG_subrange_type" and "DW_AT_upper_bound" in c.attributes:
                count = c.attributes["DW_AT_upper_bound"].value + 1
        elem_size = get_type_size(base_type) or 0
        for i in range(count):
            emit_recursive(f"{prefix}._{i}_", addr + i * elem_size, base_type, rows)

    else:
        tname = get_type_name(die)
        tsize = get_type_size(die)
        if tname and tsize:
            rows.append([prefix, f"0x{addr:08X}", tname, tsize])


def process_file(filename, out_csv):
    with open(filename, "rb") as f:
        elf = ELFFile(f)
        dwarfinfo = elf.get_dwarf_info()

        rows = [["Name", "Address", "Type", "Byte Size"]]

        # Step 1: build symbol map (from symtab)
        symtab = elf.get_section_by_name(".symtab")
        symmap = {}
        if symtab:
            for sym in symtab.iter_symbols():
                if sym.entry["st_info"]["type"] == "STT_OBJECT":
                    symmap[sym.name] = sym.entry["st_value"]

        # Step 2: iterate DIEs
        for cu in dwarfinfo.iter_CUs():
            for die in cu.iter_DIEs():
                if die.tag == "DW_TAG_variable" and "DW_AT_name" in die.attributes:
                    vname = die.attributes["DW_AT_name"].value.decode("utf-8")
                    if vname not in symmap:
                        continue
                    addr = symmap[vname]
                    emit_recursive(vname, addr,
                                   die.get_DIE_from_attribute("DW_AT_type"), rows)

        with open(out_csv, "w", newline="") as csvfile:
            csv.writer(csvfile).writerows(rows)

        print(f"[OK] Wrote {out_csv}, rows={len(rows)-1}")


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: python {sys.argv[0]} <input.elf> <output.csv>")
        sys.exit(1)
    process_file(sys.argv[1], sys.argv[2])
