from elftools.elf.elffile import ELFFile
import sys

MAX_ARRAY = 32

def get_symbols(filename):
    """Extract variable symbols from .symtab and .dynsym"""
    with open(filename, 'rb') as f:
        elffile = ELFFile(f)

        symbols = []
        # Parse both symbol tables
        for section_type in ['SHT_SYMTAB', 'SHT_DYNSYM']:
            for section in elffile.iter_sections():
                if section.header['sh_type'] == section_type:
                    for sym in section.iter_symbols():
                        # Only take object (variable) symbols
                        if sym['st_info']['type'] == 'STT_OBJECT':
                            name = sym.name
                            addr = sym['st_value']
                            size = sym['st_size']
                            if size > 0:
                                symbols.append((name, addr, size))
        # Sort by address
        symbols.sort(key=lambda x: x[1])
        return symbols

def expand_arrays(symbols):
    """Expand arrays correctly with true element size (default 1 if unknown)."""
    expanded = []

    for i, (name, addr, size) in enumerate(symbols):
        next_addr = symbols[i+1][1] if i+1 < len(symbols) else None

        # Assume scalar element by default
        elem_size = size if size in (1, 2, 4, 8) else 1

        # Case 1: symbol itself is an array
        if size > elem_size and size % elem_size == 0:
            count = min(size // elem_size, MAX_ARRAY)
            for j in range(count):
                expanded.append((f"{name}._{j}_", addr + j*elem_size, elem_size))

        # Case 2: implicit array from address gap
        elif next_addr:
            gap = next_addr - addr
            if gap > size and gap % size == 0:
                count = min(gap // size, MAX_ARRAY)
                for j in range(count):
                    expanded.append((f"{name}._{j}_", addr + j*size, size))
            else:
                expanded.append((name, addr, size))

        # Case 3: plain scalar
        else:
            expanded.append((name, addr, size))

    return expanded

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python parse_elf.py <elf-file>")
        sys.exit(1)

    filename = sys.argv[1]
    symbols = get_symbols(filename)
    expanded = expand_arrays(symbols)

    for name, addr, size in expanded:
        print(f"{name} @ 0x{addr:X} size={size}")
