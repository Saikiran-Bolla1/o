from elftools.elf.elffile import ELFFile
import sys

MAX_ARRAY = 32

def get_symbols(filename):
    """Extract variable symbols from .symtab and .dynsym"""
    with open(filename, 'rb') as f:
        elffile = ELFFile(f)

        symbols = []
        for section_name in ['.symtab', '.dynsym']:
            section = elffile.get_section_by_name(section_name)
            if not section:
                continue

            for sym in section.iter_symbols():
                # Only take object (variable) symbols
                if sym['st_info']['type'] == 'STT_OBJECT':
                    name = sym.name
                    addr = sym['st_value']
                    size = sym['st_size']
                    if size > 0:
                        symbols.append((name, addr, size))

        # Sort by address
        symbols.sort(key=lambda x: x[1])
        return symbols

def expand_arrays(symbols):
    """Expand arrays correctly, respecting element size"""
    expanded = []
    for i, (name, addr, size) in enumerate(symbols):
        next_addr = symbols[i+1][1] if i+1 < len(symbols) else None

        # Use the declared size to guess element size
        elem_size = 1
        if size in (1, 2, 4, 8):   # typical scalar sizes
            elem_size = size
        elif size > 4 and size % 4 == 0:
            elem_size = 4
        elif size > 2 and size % 2 == 0:
            elem_size = 2

        if size > elem_size:
            # Declared array
            count = min(size // elem_size, MAX_ARRAY)
            for j in range(count):
                expanded.append((f"{name}._{j}_", addr + j*elem_size, elem_size))

        elif next_addr and (next_addr - addr) >= elem_size*2 and (next_addr - addr) <= elem_size*MAX_ARRAY:
            # Hidden array from address gap
            count = min((next_addr - addr)//elem_size, MAX_ARRAY)
            for j in range(count):
                expanded.append((f"{name}._{j}_", addr + j*elem_size, elem_size))

        else:
            # Plain scalar
            expanded.append((name, addr, size))

    return expanded


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python parse_elf.py <elf-file>")
        sys.exit(1)

    filename = sys.argv[1]
    symbols = get_symbols(filename)
    expanded = expand_arrays(symbols)

    for name, addr, size in expanded:
        print(f"{name} @ 0x{addr:X} size={size}")
