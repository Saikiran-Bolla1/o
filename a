import os
from typing import Any, Dict, List, Optional

from TestPackage.logger.logger_manager import LoggerManager
from TestPackage.config.config_manager import ConfigManager

logger = LoggerManager().get_logger()

def _dispatch_canape():
    try:
        import win32com.client
    except Exception as exc:
        raise RuntimeError("pywin32 is required. Install with pip install pywin32") from exc
    try:
        return win32com.client.Dispatch("CANape.Application")
    except Exception:
        return win32com.client.Dispatch("CAMape.Application")


class CanapeController:
    """
    Opens CANape project from config.yml CANape.projectpath,
    and uses the already declared Devices section for automation.
    Devices are added to CANape only once; controller exposes them for further automation.
    """

    def __init__(self, config: Optional[ConfigManager] = None):
        self._cfg = config or ConfigManager()
        self._canape_cfg = self._cfg.get("CANape")
        if not self._canape_cfg:
            raise RuntimeError("CANape section missing in config.yml.")

        self._projectpath = os.path.expandvars(os.path.expanduser(self._canape_cfg.get("projectpath")))
        self._devices_cfg = self._canape_cfg.get("Devices") or []
        if not self._devices_cfg:
            raise RuntimeError("No devices declared in CANape.Devices in config.yml.")

        self._app = None
        self._devices: Dict[str, Any] = {}
        self._opened = False

        self._open_project_and_add_devices()

    @property
    def app(self):
        return self._app

    @property
    def devices(self) -> Dict[str, Any]:
        return self._devices

    def _open_project_and_add_devices(self):
        self._app = _dispatch_canape()
        # Open CANape project
        self._app.Open2(self._projectpath, 1, 100000, 0, 0, 1)
        self._opened = True
        logger.info(f"[CANape] Project opened: {self._projectpath}")

        # Add devices from config (do not duplicate if already present)
        for device in self._devices_cfg:
            name = str(device.get("DeviceName"))
            a2l = str(device.get("A2lPATH", ""))
            protocol = str(device.get("Protocol"))
            channel = int(device.get("CANChannel", 1))

            # Only add if not already present
            if name not in self._devices:
                dev_com = self._app.Devices.Add(name, a2l, protocol, channel)
                self._devices[name] = dev_com
                logger.info(f"[CANape] Device added: {name}")

    def get_device(self, name: str):
        """Get device COM object by name (must match DeviceName from config)."""
        return self._devices.get(name, None)

    def go_online_all(self, reconnect: bool = False):
        for name, dev in self._devices.items():
            try:
                dev.GoOnline(bool(reconnect))
                logger.info(f"[CANape] Device '{name}' online")
            except Exception as exc:
                logger.error(f"[CANape] Device '{name}' goonline error: {exc}")

    def go_offline_all(self):
        for name, dev in self._devices.items():
            try:
                dev.GoOffline()
                logger.info(f"[CANape] Device '{name}' offline")
            except Exception as exc:
                logger.error(f"[CANape] Device '{name}' gooffline error: {exc}")

    def quit(self):
        try:
            self.go_offline_all()
        except Exception:
            pass
        try:
            if self._app:
                self._app.Quit()
        except Exception:
            pass
        finally:
            self._app = None

# Usage:
# ctl = CanapeController()
# ctl.go_online_all()
# device = ctl.get_device("XCPsim")
