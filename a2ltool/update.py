from __future__ import annotations

import re
from dataclasses import dataclass
from enum import Enum
from pathlib import Path
from typing import Dict, List, Optional

from .a2l import A2LDocument
from .elf import load_symbols_from_elf, SymbolInfo
from .pe import load_symbols_from_pe_or_pdb


class UpdateScope(Enum):
    ADDRESSES = "ADDRESSES"
    ALL = "ALL"


class UpdateMode(Enum):
    PRESERVE = "PRESERVE"
    STRICT = "STRICT"


def update_from_elf(
    doc: A2LDocument,
    elf_path: Path,
    scope: UpdateScope = UpdateScope.ALL,
    mode: UpdateMode = UpdateMode.PRESERVE,
) -> A2LDocument:
    """Update A2L document with symbols from ELF file."""
    if elf_path.suffix.lower() in (".exe", ".dll", ".sys", ".pdb"):
        symbols = load_symbols_from_pe_or_pdb(elf_path)
    else:
        symbols = load_symbols_from_elf(elf_path)
    
    return doc.update_addresses_and_types(
        symbols=symbols,
        scope=scope.value,
        mode=mode.value,
    )


def create_from_elf(
    elf_path: Path,
    characteristic: Optional[str] = None,
    measurement_regex: Optional[str] = None,
    measurement_range: Optional[List[str]] = None,
) -> A2LDocument:
    """Create a new A2L document from ELF debug info."""
    if elf_path.suffix.lower() in (".exe", ".dll", ".sys", ".pdb"):
        symbols = load_symbols_from_pe_or_pdb(elf_path)
    else:
        symbols = load_symbols_from_elf(elf_path)
    
    # Filter symbols based on criteria
    filtered_symbols = {}
    
    if characteristic:
        if characteristic in symbols:
            filtered_symbols[characteristic] = symbols[characteristic]
    
    if measurement_regex:
        pattern = re.compile(measurement_regex)
        for name, sym in symbols.items():
            if pattern.match(name):
                filtered_symbols[name] = sym
    
    if measurement_range:
        start_addr = int(measurement_range[0], 0)  # Support hex and decimal
        end_addr = int(measurement_range[1], 0)
        for name, sym in symbols.items():
            if start_addr <= sym.address <= end_addr:
                filtered_symbols[name] = sym
    
    # If no specific criteria, take all symbols
    if not any([characteristic, measurement_regex, measurement_range]):
        filtered_symbols = symbols
    
    # Generate A2L content
    a2l_content = _generate_a2l_from_symbols(filtered_symbols)
    return A2LDocument(a2l_content)


def _generate_a2l_from_symbols(symbols: Dict[str, SymbolInfo]) -> str:
    """Generate basic A2L content from symbols."""
    lines = [
        "ASAP2_VERSION 1 71",
        "",
        "/begin PROJECT demo_project \"Demo project generated by a2ltool-py\"",
        "",
        "/begin HEADER \"Generated A2L file\"",
        "  VERSION \"1.0\"",
        "  PROJECT_NO demo_project",
        "/end HEADER",
        "",
        "/begin MODULE demo_module \"Demo module\"",
        "",
    ]
    
    for name, sym in symbols.items():
        datatype = sym.a2l_datatype or "ULONG"
        lines.extend([
            f"/begin MEASUREMENT {name} \"Measurement for {name}\"",
            f"  DATA_TYPE {datatype}",
            f"  ECU_ADDRESS 0x{sym.address:X}",
            "  CONVERSION NO_CONVERSION",
            "  0 0 65535",
            "/end MEASUREMENT",
            "",
        ])
    
    lines.extend([
        "/end MODULE",
        "/end PROJECT",
    ])
    
    return "\n".join(lines)